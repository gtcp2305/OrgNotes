#+TITLE:      Learn Git
#+AUTHOR:     tongtong Tian
#+EMAIL:      tiantongtong@sia.cn
#+DATE:       2018-07-14
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+CATEGORY:    Git org
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://orgmode.org/worg/style/worg.css"/>
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
* 版本库
版本库又名仓库（repository），可以简单的理解为目录，在这个目录里所有文
件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻
都可以追踪历史，或者在将来可以还原。
** 创建版本库
1.创建一个空目录
: mkdir LearnGit
2.通过 ~git init~命令把这个目录变成Git可以管理的仓库
: -> git init
: Initialized empty Git repository in /home/un/LearnGit/.git/
后面那句话是告诉你是一个空仓库，在这个仓库下面多了一个 ~.git~ 的目录，
它是Git 用来跟踪管理版本库的，这个目录里的文件不要手动修改。
** 把文件添加到版本库
所有的版本控制系统，包括Git,只能跟踪文本文件的改动，而图片视频这些二进
制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，对具体改动的
内容没法知道。
把文件添加到版本库分为两步：
1. 将文件，比如learnGit.txt放进版本库目录下，输入以下命令
: & git add learnGit.txt
2.用命令 ~git commit~ 告诉Git,把文件提交到仓库
: $ git commit -m "first added."
~-m~ 是本次提交的说明，可以输入任意内容。
以下是Git 的反馈信息：
: [master (root-commit) a5cd9ee] first added.
: 1 file changed, 2 insertions(+)
: create mode 100644 learnGit.txt
~1 file changed~ : 我们新添加了learnGit.txt 文件； ~2 insertions~ : 插
入了两行内容（learnGit.txty 有两行内容）。
Git 添加文件需要两步是因为 ~commit~ 可以一次提交很多文件，所以你可以多
次 ~add~ 不同的文件。
* 时光穿梭机
我们修改learnGit.txt文件内容，修改完成后使用命令 ~git status~ 让我们掌
握仓库当前的状态：
: git status
Git 的反馈如下：
#+BEGIN_EXAMPLE
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   learnGit.txt

no changes added to commit (use "git add" and/or "git commit -a")
#+END_EXAMPLE
上面的信息告诉我们，learnGit.txt 文件被修改了，但还没有提交。
这个命令只能告诉我们文件被修改，但是不能看到哪里被修改了，以及具体修改
了哪些内容，这时候我们可以使用 ~git diff~.
: $ git diff learnGit.txt
先来看看这个文件修改前后的状态：
修改前
#+BEGIN_EXAMPLE
 Git is a version control system.
 Git is free software.
#+END_EXAMPLE
修改后
#+BEGIN_EXAMPLE
 Git is a distributed version control system.
 Git is free software.
#+END_EXAMPLE
运行 ~git diff~ 以后Git反馈的信息：
#+BEGIN_EXAMPLE
Git diff --git a/learnGit.txt b/learnGit.txt
index 46d49bf..9247db6 100644
--- a/learnGit.txt
+++ b/learnGit.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
#+END_EXAMPLE
知道了对文件做了什么修改以后，再把它放进仓库：
: git add learnGit.txt
在进行 ~git commit~ 之前，我们先调用 ~git status~ 看看当前仓库的状态。
: git status
Git 反馈如下：
#+BEGIN_EXAMPLE
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   learnGit.txt
#+END_EXAMPLE
下一步就可以放心的提交了
: git commit -m "add distributed"
** 版本回退
当我们不断的修改文件，不断的提交到仓库，每当你觉得文件修改到一定程度的
时候，就可以“保存一个快照”，这个快照在Git中被称为 ~commit~,一旦你把文
件改乱了，或者误删了，还可以从一个 ~commit~ 恢复，然后继续工作，而不是
把几个月的工作成果全部丢失。
Git 可以让我们知道某个文件的的修改历史记录，使用 ~git log~ 命令实现。
#+BEGIN_EXAMPLE
$ git log
commit 534d869af09c32b43986626a07ae1b808d409b08 (HEAD -> master)
Author: Tian <gtcp2305@yeah.net>
Date:   Sat Jul 14 15:03:27 2018 +0800

    add under the GPL

commit f22214ff20f0c8064d1ecb7065f6023085e2cb03
Author: Tian <gtcp2305@yeah.net>
Date:   Sat Jul 14 14:57:49 2018 +0800

    add distribute

commit a5cd9eed1100d6c9085d2c57326924e0b5853efb
Author: Tian <gtcp2305@yeah.net>
Date:   Sat Jul 14 13:40:11 2018 +0800

    first added.
#+END_EXAMPLE
~git log~ 显示从最近到最远的提交日志，如果想简化输出，可以用下面的命令：
: $ git log --pretty=oneline
git 的版本号叫做 commit_id ,是一大串数字与字母的组合，比如上面的534d869a...,版本回退使
用 ~git reset --hard commit_id~. 比如要退回到“add distribute”的那个版
本，执行如下指令即可：
: git reset --hard f22214ff20f0c8064d1ecb7065f6023085e2cb03
** 工作区和暂存区
*** 工作区
就是你能在电脑上看到的目录
*** 版本库
工作区有一个 ~.git~ 目录，这就是Git 的版本库，里面存了很多东西，其中最
重要的东西是称为stage(index)的 *暂存区*,还有Git 自动创建的分支
~master~ ,以及指向它的一个指针 ~HEAD~.
结合前面的内容，把文件添加到版本库分两步执行：
第一步， ~git add~ 把文件添加到暂存区；
第二步， ~git commit~ 提交更改，实际就是把暂存区的所有内容提交到当前分
支。
一旦提交（commit）后，如果对工作区没做任何修改，那么工作区就是干净的。
~git commit~ 只负责把暂存区的修改提交了，如果 ~git add~ 后又修改了文件，
那么除非再运行一次 ~git add~ ,否则 ~git commit~ 只提交第一次修改的内容，
而第二次的修改不会提交。
提交后，用 ~git diff HEAD -- <file>~ 命令可以查看工作区和版本库里面最
新版本的区别。
** 撤销修改
*** 修改后没放入暂存区stage
~git checkout --<file>~ 可以将工作区的文件恢复到最近一次 ~git add~ 或
~git commit~ 的状态，从而丢弃工作区的修改。
*** 修改后放入暂存区stage
如果在工作区修改后，运行了 ~git add~ 放入了暂存区，但还没有提交，此时
要从暂存区拿回文件，只需要运行 ~git reset HEAD <file>~ ,再运行
~git checkout --<file>~ 即可撤销暂存区的修改。
*** 修改后已经提交
此时只需要上面介绍的版本回退即可。
** 删除文件
如果用 ~rm~ 命令在删除了工作区的一个文件，那么现在你有两个选择：
*** 删除版本库中的该文件
运行 ~git rm <file>~ ,并且 ~git commit~ 提交。
*** 从版本库中恢复
如果是误删，那么可以用 ~git checkout -- <file>~ 命令从版本库中恢复这个
文件。
