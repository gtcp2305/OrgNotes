#+DESCRIPTION: 本文主要是记录在学习《C++ Primer 5th》这本书的心得，帮助记忆。
#+TITLE: Class Usage
#+OPTIONS: H:1 num:t||nil toc:t||nil ^:{}
#+TAGS: CPP11
本文主要介绍单个的C++类的特性，包括数据抽象和封装，几大重要函数，运算符重载以及一些C++11新特性。
* 数据抽象和封装
数据抽象是一种依赖于接口（interface）和实现（implementation）分离的编程技术，接口包括用户所能执行的操作；实现包括类的数据成员、接口函数的函数体以及类的各种私有函数。封装实现了类接口和实现的分离，将实现细节隐藏，用户只能使用接口。要实现数据的抽象和封装我们需要定义一个抽象数据类型，并隐藏它的数据成员，只给用户留出操作接口，即公有的成员函数。
* 定义抽象数据类型
使用 =class= 关键字可以定义新的数据类型，包含数据成员和成员函数，类通过访问控制符来控制用户可以调用的接口，包括 /public/, /protect/ 和 /private/.其中 /public/ 的成员可以被用户代码使用, /protect/ 和 /private/ 的区别在于继承时的表现，protect 成员能被子类直接操作，而private 成员连子类都不能直接操作。可以为一个类声明 /friend/ 函数/类，這些 /friend/ 函数/类可以访问该类的所有数据成员和成员函数。
** 类的数据成员
由C++的内存模型可以知道C++类对象的内存中保存的是非静态数据成员，类的成员函数不保存在类对象的内存中。通常情况下类的数据成员不应该是 /piblic/ 的，而应该通过类的公有成员函数操作数据成员。
1. 静态数据成员
   该成员前有 =static= 修饰，静态成员不保存在对象内存中，而是保存在程序的静态存储区， _通常静态数据是被该类所有的对象所共享，所以它们的初始化不是由类的构造函数完成的_ 。它具有类属性。通常情况下我们应该在类外定义和初始化每一个静态数据成员，但也有例外，我们可以为静态数据成员提供const整数类型的类内初始值，不过要求静态数据成员必须是字面值常量类型constexpr.
2. 普通数据成员
   1. 可变数据成员
      有时候我们会遇到这样的情况，我希望通过常成员函数改变一个常量对象的数据成员，那就需要这种可变数据成员，只需要将其声明为 *mutable* 即可。
   2. 常量数据成员
      加 const 即可，其初始化和定义一般在类外。
   3. 其他
** 类的成员函数
*** this 指针
类的成员函数基本都是为操作数据成员而存在的，普通的（非virtual)成员函数与全局函数其实在调用上没啥区别，但是但我当我们通过对象调用成员函数时，成员函数是如何区分它当前所操作的数据是来自哪个对象的呢？答案是在每个非静态成员函数中隐藏了一个参数，这个参数称为 /this/ 指针。 /this/ 指针的类型是 =T*const this= 属于 top-leval const,在调用非virtual函数时会发生如下转换
: a.fun()  -->  fun(&a)
即调用该成员函数的对象的地址作为第一个参数传给了成员函数，因此，成员函数当然知道操作的是哪个对象的数据。

接下来的问题是类的const对象没法调用普通的成员函数（想想为甚么？），我们需要给const对象写一个它们能调用的版本，那就是 _const成员函数_，就是在函数参数列表后面加const,其效果就是将 =T*const this= 变成了 =const T*const this= ,它能被普通对象和常量对象正确调用。
*** 静态成员函数
静态成员函数就不包含this 指针，因此不能声明为const 的，而且我们也不能在static 函数体内使用this 指针，static 关键字只能出现在类的内部。

还有几个关键的函数控制数据的初始化、拷贝、移动和销毁，下面就这几个关键函数详细介绍。
构造函数，拷贝构造函数，拷贝赋值函数，移动构造函数，移动赋值函数，析构函数。如果一个类没有定义自己的相应函数，那么编译器会自动为它生成一个默认版本的函数。如果这个类不涉及内存动态分配的话，那么這些默认版本的函数还是可以的。
*** 指向成员的指针(.*和 ->*)
我们可以定义一个指向某个类的成员函数的指针，与普通的函数指针不同：
- 其声明形式： /Type (ClassName::*PointerName)(Params)/ ,或者使用 /typedef/  或 /using/ 来定义一个新类型来减少代码复杂度
- 初始化或赋值必须通过类名解析成员
- 成员函数指针必须通过类的对象来调用，因为必须要为 /this/ 指针赋值
- 使用 .* 或者 ->* 调用
- 调用时类对象和成员函数指针用圆括号包围起来，因为 * 比 () 运算符的优先级低
#+BEGIN_SRC C++ -n -r :includes <iostream> :flags -Wall :main no :exports both :results value verbatim
  class Test {
  public:
      Test() = default;
      virtual ~Test() = default;
      void setVal(int v) { m_i = v; }
      int getVal() { return m_i; }

  private:
    int m_i = 0;
  };
  using PtrMF = void (Test::*)(int);
  using PtrMD = int Test::*;
  int main(int argc, char *argv[]) {
    void (Test::*pmf)(int) = &Test::setVal;
    Test t;
    (t.*pmf)(30);
    std::cout << t.getVal() << "\n";
    PtrMF pmf1 = &Test::setVal;
    (t.*pmf1)(50);
    std::cout << t.getVal() << "\n";
    Test *pt = new Test;
    (pt->*pmf1)(90);
    std::cout << pt->getVal() << "\n";
    delete pt;
    return 0;
  }
#+END_SRC

#+RESULTS:
: 30
: 50
: 90

** 类的友元
包括友元函数和友元类，类的友元可以访问它的私有成员，这在一定程度上破坏了数据封装特性。每个类控制自己的友元，友元关系不存在传递性。友元声明不是类或函数声明，在声明友元前，应该先声明类或函数。
*** 友元类
一个类的友元类可以访问该类包括非公有成员在内的所有成员。
*** 友元函数
如果一个类想把一组重载函数声明为它的友元，它需要对这组函数中的每一个分别声明。
#+BEGIN_SRC C++ -n -r :includes <iostream> :flags -Wall :main no :exports both :results value verbatim
  class Test;
  void FFunc(const Test& t);

  class FTest;

  class Test {
  public:
      friend FTest;
      friend void FFunc(const Test& t);

      Test(double _d = 0.0){m_d=_d;}
      void show(){std::cout << m_d << "\n";}
      ~Test(){}
  private:
      double m_d = 0.0;
  };

  void FFunc(const Test& t)
  {
      std::cout << t.m_d << "\n";
  }

  class FTest {
  public:
      FTest(){};
      ~FTest(){}
      void showTestVal(const Test&t){std::cout << t.m_d << "\n";}
  };

  int main(int argc, char *argv[]) {
      Test t(20);
      FFunc(t);
      FTest ft;
      ft.showTestVal(t);
      return 0;
  }
#+END_SRC

#+RESULTS:
: 20
: 20

** 名字查找和类的作用域
1. 编译器首先编译类的声明，直到类全部可见后才编译成员函数，因此在 *成员函数内* 可以使用类中定义的任何名字。
2. 声明中使用的名字，包括返回类型和参数列表中使用的名字，都必须在使用前确保可见。
** 构造函数
构造函数的作用是在创建类对象时初始化对象的数据成员，有时候也可以在隐式类型转换时发挥作用。其名字与类的名字相同，但没有返回值。
除非我们自己定义了一个构造函数，否则编译器会为我们合成一个默认构造函数。
*** 默认构造函数
默认构造函数无须任何实参（包括所有形参都有默认值的情况），默认构造函数按如下规则初始化数据成员：
1. 如果存在类内初始值（＝或{}初始化），用它来出始化
2. 否则默认初始化
由编译器生成的默认构造函数并不可靠，特别当类需要分配动态内存时，我们必须要自己定义一个。如果要使用默认构造函数，在定义变量时不要在变量后面加括号。
*** =default                                                        :CPP11:
如果我们需要默认的行为，可以在参数列表后面加上 ~=default~ 来要求编译器生成构造函数。当出现在类内部时，构造函数内联，当出现在类外部时，构造函数不是内联。

*** 初始值列表
初始值列表显式为类的非静态数据成员初始化， *数据成员初始化的顺序与它们在类内的声明顺序一致，与在初始值列表中的顺序无关*,一个数据成员在初始化时，初始化方式的优先级如下：初始值列表>类内初始值>默认初始化。也就是说在执行构造函数体前就已经完成了初始化，在函数体中执行的是赋值。

如果成员是const,reference,或者属于某种未提供默认构造函数的类类型，我们必须通过构造函数初始值列表为这些成员提供初值。
*** 默认实参与构造函数
如果一个构造函数萎缩为所有形参提供了默认实参，则它实际上也定义了默认构造函数。
*** 隐式的类类型转换
_如果构造函数只接受一个实参，那么它实际上定义了从实参类型转换到该类类型的规则，有时这种构造函数称为 *转换构造函数* ,_ 这种转换只允许一步类型转换。如果要抑制这种转换，可以在构造函数声明前加 =explicit=,该关键字只对一个参数的构造函数有用，另外explicit 构造函数只能用于直接初始化（以参数列表直接调用构造函数），而不能用于拷贝形式的初始化（使用＝）。
* 拷贝和移动控制
在前面看到了如何定义一个新类型以及在此类型上可执行的操作，接下来将学习如何通过定义一些特殊的成员函数来控制该类型对象拷贝、赋值、移动或销毁时做什么。包括：拷贝构造函数、移动构造函数、拷贝赋值函数、移动赋值运算符和析构函数。拷贝构造函数和移动构造函数定义了当用同类型的另一个对象 *初始化* 本对象时做什么，拷贝赋值函数和移动赋值运算符定义了将一个对象 *赋予* 同类型的另一个对象时做什么，析构函数定义对象在销毁时做什么。
** 拷贝构造函数
如果一个函数的第一个参数是自身类类型的引用，并且任何额外参数都有默认值，则此构造函数是拷贝构造函数
*** 合成拷贝构造函数
如果我们没有为一个类定义一个拷贝构造函数，那么编译器会为我们定义一个合成拷贝构造函数，它只是简单的将其参数的成员的值逐个拷贝到正在创建的对象中，每个成员的类型决定了它如何拷贝：类类型的成员用拷贝构造函数来拷贝，内置类型则直接拷贝。虽然我们不能直接拷贝一个数组，但是我们可以逐元素的拷贝一个数组的成员。
*** 拷贝初始化和直接初始化
直接初始化是普通的函数匹配来选择与我们提供的参数最匹配的构造函数（包括拷贝构造函数）；拷贝初始化是用一个已有的对象初始化正在构建的对象，依靠拷贝构造函数或者移动构造函数完成，发生在以下情形：
- 以传值的方式向函数传递对象实参或者返回值；
- 使用＝定义变量
- 用花括号列表初始化数组元素或聚类中的成员
** 拷贝赋值运算符
类对象的赋值操作可以通过重载赋值运算符来控制，如果类没有定义自己的拷贝赋值运算符，那么编译器会为它合成一个。赋值运算符通常应该返回一个指向其左侧运算对象的引用。合成的拷贝赋值运算符会将右侧运算对象的每个非static成员赋予左侧运算对象的相应成员，这一工作主要通过成员类型的拷贝赋值运算符完成。
** 析构函数
析构函数执行与构造函数相反的操作：释放对象所使用的资源并销毁对象的非static数据成员。在一个析构函数中，首先执行函数体，然后销毁成员，成员按初始化顺序的逆序销毁，不存在类似构造函数的初始化列表的东西来控制成员如何销毁，析构部分是隐式的，成员销毁时发生什么完全依赖成员的类型，类类型执行自己的析构函数，内置类型什么也不需要做。如果一个类有动态分配内存、文件资源或database 时才有必要定义析构函数。 *隐式销毁一个内置的指针类型的成员不会delete它所指向的对象*.如果一个类没有定义自己的析构函数，那么编译器会为它合成一个。
** 三五法则
我们怎么确定一个类需要哪些拷贝控制类的函数呢？
1. 需要析构函数的类同时也需要拷贝和赋值操作
2. 需要拷贝操作的类也需要赋值操作，反之亦然
** 使用＝default
我们可以将上述几个函数显示的定义为＝default,让编译器生成合成的版本，可以在类内使用也可以在类外使用，区别就是内联与否。我们只能对编译器可以合成的默认构造函数或拷贝控制成员使用＝default.
** 阻止拷贝
虽然大多数类应该定义拷贝构造函数，但是有些类我们不希望拷贝，可以通过以下两种方法实现：
*** 定义删除的函数
在函数参数列表后面加＝delete 来定义删除的函数，我们虽然声明了它们，但是不可以使用它们。＝delete 必须出现在函数第一次声明的时候。另外我们可以对任何函数使用＝delete.但是需要注意的是，析构函数不能是删除的，因为对于一个删除了析构函数的类型，编译器将不允许创建该类型的变量或临时变量，也不能释放指向该类型动态分配对象的指针。

本质上，当一个类具有不可能拷贝、赋值或销毁的数据成员时，则类的合成的拷贝控制成员就被定义为删除的。
*** private 拷贝控制
在新标准之前，类通过将拷贝构造函数和赋值运算符定义为private 来阻止拷贝。这样的话用户代码虽然不能拷贝这个类型的对象了，但是友元和成员函数仍然可以拷贝对象，为了阻止这种情况，可一将拷贝控制成员声明为private,但并不定义它们。试图方文一个未定义未定义的成员将导致链接错误。
** 拷贝控制和资源管理
一般来说，我们可以定义一个类的行为像一个值或者像一个指针。类的行为像一个值意味着它有自己的状态（数据），当我们拷贝一个对象时，副本和原对象是完全独立的，改变副本不会影响原对象（deep copy）； 类的行为像一个指针意味着共享状态，发生拷贝时，副本和原对象使用相同的底层数据，改变副本也会改变原对象（shallow copy）， 反之亦然。 两者的差异取决于拷贝构造函数和拷贝赋值运算符。
编译器合成的拷贝构造和拷贝赋值运算符执行的是shallow copy(memberwise copy),      即对每个成员的值逐个进行拷贝，这对于那些没有动态内存的类是可以很好的工作的，但是对于有动态内存的类这是很危险的：
#+BEGIN_SRC C++ -n -r :exports both :results value verbatim
  #include <iostream>
  using std::ostream;
  class IntVec
  {
  public:
      IntVec(int len = 10);
      //模拟编译器合成的拷贝构造函数和拷贝赋值运算符，执行浅拷贝
      IntVec(const IntVec& other);
      // IntVec& operator=(const IntVec& rhs)=default;
      ~IntVec()
      {
          std::cout << "In destructor " << m_iv << '\n';
          for (int i = 0; i < m_length; ++i) {
              m_iv[i] = i + 90;
          }
          delete[] m_iv;
      }
      int getLength() { return m_length; }
      int *getData() { return m_iv; }

  private:
      int m_length = 0;
      int *m_iv = nullptr;
  };

  IntVec::IntVec(int len) : m_length{ len }, m_iv{ new int[m_length]() }
  {
      std::cout << "In default constructor " << &m_iv << ' ' << m_iv << '\n';
  }

  IntVec::IntVec(const IntVec& other): m_length(other.m_length),m_iv(other.m_iv)
  {
      std::cout <<  "In default copy constructor "<<&m_iv<<' '<<m_iv<<'\n';
  }

  int main(int argc, char *argv[])
  {
      IntVec iv;
      {
          IntVec tmp = iv;
      }
      int *test = iv.getData();
      std::cout << "-----\n";
      for (int i = 0; i < 10; ++i) {
          std::cout << test[i] << ' ';
      }
      std::cout << "\n-----\n";
      return 0;
  }
#+END_SRC

#+RESULTS:
: In default constructor 0x7ffcd1f201a8 0x56226c583e70
: In default copy constructor 0x7ffcd1f201b8 0x56226c583e70
: In destructor 0x56226c583e70
: -----
: 0 0 92 93 94 95 96 97 98 99
: -----
: In destructor 0x56226c583e70
从输出结果看， =iv.m_iv= 分配的内存地址是0x56226c583e70,在执行浅拷贝后， =tmp.m_iv= 的地址也指向同一地址，在tmp被销毁后，释放了该地址的内存，在程序最后，iv 被销毁时，再一次释放该处内存，但是不知道为甚么GCC 对重复释放同一处内存不报错，因此我在析构函数中将内存中的值改变了，以此来标记已被销毁。

为了解决这一问题，可以在浅复制的情况下增加一个计数器来控制资源的销毁与否，即类指针，或者使用深复制，即类值。
#+BEGIN_SRC C++ -n -r :exports both :results value verbatim
  #include <iostream>
  using std::ostream;
  class IntVec
  {
  public:
      IntVec(int len = 10);
      IntVec(const IntVec& other);
      IntVec& operator=(const IntVec&);
      ~IntVec()
      {
          if(--*m_num == 0){
              delete m_num;
              delete [] m_iv;
          }
          std::cout << "In destructor " << m_iv << "  m_num = : "<<*m_num<<'\n';
      }
      int getLength() { return m_length; }
      int *getData() { return m_iv; }
      void setValue(int index,int value){
          if(index>=0 && index<m_length)
              m_iv[index]=value;
      }

  private:
      int m_length = 0;
      int *m_iv = nullptr;
      mutable int *m_num = nullptr;
  };

  IntVec::IntVec(int len) : m_length{ len }, m_iv{ new int[m_length]() }, m_num{new int{1}}
  {
      std::cout << "In default constructor " << &m_iv << ' ' << m_iv <<" m_num = "<<*m_num<< '\n';
  }

  IntVec& IntVec::operator=(const IntVec & rhs)
  {
      ++rhs.m_num;

      if(--*m_num == 0){
          delete m_num;
          delete [] m_iv;
      }

      m_num=rhs.m_num;
      m_length= rhs.m_length;
      m_iv = rhs.m_iv;
      std::cout << "m_num = "<<*m_num<<'\n';
      return *this;
  }

  IntVec::IntVec(const IntVec& other): m_length(other.m_length),m_iv(other.m_iv),m_num(other.m_num)
  {
      ++*m_num;
      std::cout <<  "In copy constructor "<<&m_iv<<' '<<m_iv<<" m_num = "<<*m_num<<'\n';
  }

  int main(int argc, char *argv[])
  {
      IntVec iv;
      iv.setValue(0, 90);
      iv.setValue(3, 20);

      {
          IntVec tmp = iv;
          for(int i = 0; i < tmp.getLength(); ++i)
              {
                  tmp.setValue(i, i+20);
              }
          int *test =tmp.getData();
          std::cout << "-----\n";
          for (int i = 0; i < 10; ++i) {
              std::cout << test[i] << ' ';
          }
          std::cout << "\n-----\n";
      }
      int *test = iv.getData();
      std::cout << "-----\n";
      for (int i = 0; i < 10; ++i) {
          std::cout << test[i] << ' ';
      }
      std::cout << "\n-----\n";
      return 0;
  }
#+END_SRC

#+RESULTS:
#+begin_example
In default constructor 0x7fff2599c2c8 0x55b981544e70 m_num = 1
In copy constructor 0x7fff2599c2e8 0x55b981544e70 m_num = 2
-----
20 21 22 23 24 25 26 27 28 29
-----
In destructor 0x55b981544e70  m_num = : 1
-----
20 21 22 23 24 25 26 27 28 29
-----
In destructor 0x55b981544e70  m_num = : 0
#+end_example

这种使用计数器来控制对象销毁的浅复制有以下要点：
1. 除拷贝构造函数外，其余构造函数必须要对计数器初始化为1;
2. 在拷贝构造函数中，递增计数器；
3. 在拷贝赋值运算符中等号右边的对象的计数器递增1，等号左边对象的计数器递减1,如果减为0则应该将动态内存释放掉；
4. 在析构函数中，递减计数器，递减后如果为0,怎释放动态内存。

深复制和浅复制的区别在于是否为新对象重新分配内存。以下是深复制的做法：
#+BEGIN_SRC C++ -n -r :exports both :results value verbatim
  #include <iostream>
  using std::ostream;
  class IntVec
  {
  public:
      IntVec(int len = 10);
      IntVec(const IntVec& other);
      IntVec& operator=(const IntVec& other);

      ~IntVec()
      {
          std::cout << "In destructor " << m_iv << '\n';
          for (int i = 0; i < m_length; ++i) {
              m_iv[i] = i + 90;
          }
          delete[] m_iv;
      }
      int getLength() { return m_length; }
      int *getData() { return m_iv; }
      void setValue(int index,int value){
          if(index>=0 && index<m_length)
              m_iv[index]=value;
      }
  private:
      int m_length = 0;
      int *m_iv = nullptr;
  };

  IntVec::IntVec(int len) : m_length{ len }, m_iv{ new int[m_length]() }
  {
      std::cout << "In default constructor " << &m_iv << ' ' << m_iv << '\n';
  }

  IntVec::IntVec(const IntVec& other)
  {
      m_length = other.m_length;
      m_iv = new int[m_length]();
      for(int i = 0; i < m_length; ++i)
          {
              m_iv[i]= other.m_iv[i];
          }
      std::cout <<  "In copy constructor "<<&m_iv<<' '<<m_iv<<'\n';
  }

  IntVec& IntVec::operator=(const IntVec& other)
  {
      if(&other == this)
          return *this;
      m_length = other.m_length;
      m_iv = new int[m_length]();
      for(int i = 0; i < m_length; ++i)
          {
              m_iv[i] = other.m_iv[i];
          }
  }
  int main(int argc, char *argv[])
  {
      IntVec iv;
      iv.setValue(0, 90);
      iv.setValue(3, 20);

      {
          IntVec tmp = iv;
          for(int i = 0; i < tmp.getLength(); ++i)
              {
                  tmp.setValue(i, i+20);
              }
          int *test =tmp.getData();
          std::cout << "-----\n";
          for (int i = 0; i < 10; ++i) {
              std::cout << test[i] << ' ';
          }
          std::cout << "\n-----\n";
      }
      int *test = iv.getData();
      std::cout << "-----\n";
      for (int i = 0; i < 10; ++i) {
          std::cout << test[i] << ' ';
      }
      std::cout << "\n-----\n";
      return 0;
  }
#+END_SRC

#+RESULTS:
#+begin_example
In default constructor 0x7ffd6a8b8ee8 0x5589475e5e70
In copy constructor 0x7ffd6a8b8ef8 0x5589475e6eb0
-----
20 21 22 23 24 25 26 27 28 29
-----
In destructor 0x5589475e6eb0
-----
90 0 0 20 0 0 0 0 0 0
-----
In destructor 0x5589475e5e70
#+end_example

* 运算符重载
运算符重载的本质是函数重载，操作符是当作函数来看待的。
1. 编译器如何解析操作符
   - 如果所有的操作数都是内置基本类型，编译器会调用一个内置的操作符，如果不存在的话，则编译错误
   - 如果任何一个操作数是自定义类型（包括自定义枚举类型），编译器检查该类型是否重载了操作符，如果没有，它将会把用户定义的类型转化为内置类型，以便于它调用相应的内置操作符，如果失败，则编译错误。
2. 注意事项
   - 除了 =?:= =sizeof= =::= =.= =.*= 这5个运算符以外，其余运算符都可以重载；
   - 只能重载已经存在的运算符，而不能创造新的运算符；
   - 不能更改运算符的操作数（参数）的个数，原来是几元操作符，重载后也是几元操作符，对于二元运算符来说，左侧运算数传递给第一个参数，右侧运算数传递给第二个参数，除了重载的函数调用运算符operator()外，其它重载运算符不能有默认实参；
   - 在对运算符重载时，它或者是类的成员函数，或者它必须包含一个自定义类型的参数，如果重载为类的成员，那么它的第一个（左侧）操作数绑定到 =this= 指针，因此运算符函数的显式参数数量比运算符的操作数的总数少一个；
   - 所有操作符均保持原有的优先级和结合律。
3. 调用重载的运算符函数
   - 非成员函数运算符 :: 可以写成普通的表达式来间接传递正确的实参，也可以像调用普通函数一样直接调用。
                 : data1 + data2; //普通的表达式
                 : oeprator+(data1,data2); //等价的调用
                 调用非成员运算符函数 =operator+=,将data1,data2分别作为第一个参数和第二个参数传入函数。
   - 成员函数的运算符 :: 可以像调用其它成员函数一样调用运算符。
                 : data1 + data2;
                 : data1.operator+(data2);
                 将 =this= 绑定到 data1,将data2作为实参传入函数。
4. 某些运算符不应该被重载
   通常情况下不应该重载 =,= =& =&& =||= 运算符
5. 选择作为成员或者非成员
   - 赋值(=)，下标([]),调用(()),成员访问箭头(->)运算符必须是成员函数
   - 改变对象状态的运算符(+=,-=,--)或者与给定类型密切相关的运算符，通常应该是成员
   - 单目操作符通常也被重载为成员函数
   - 具有对称性的运算符可能左右对调操作数，不改变左侧运算符状态的，例如算术运算，相等性，关系和位运算符，应该是普通的非成员函数
6. 运算符可以有三种方式重载：类的友元函数，类的成员函数和普通函数。
   1) 重载为成员函数
      - 被重载的运算符必须作为左侧操作对象的成员函数
      - 左侧操作对象变为隐式的 =*this= 对象
      - 所有其它操作对象变为函数的实参
   2) 重载为友元函数

   3) 重载为普通函数



#+CAPTION: 运算符重载总结
#+ATTR_HTML: :border 2
| 运算符 | 参数                                                         | 返回值               | 重载方式   | 其它                 |
| <c6>   | <l60>                                                        | <l20>                | <c10>      | <l20>                |
|--------+--------------------------------------------------------------+----------------------+------------+----------------------|
| <<     | 1:ostream& ; 2:const T&,T为要打印的类类型                    | 返回它的ostream形参  | friend[[out]]  | 尽量减少格式化操作，必要时声明为友元 |
| >>     | 1:istream& ; 2:T& ,T为自定义类型                             | 返回它的istream形参  | friend     | 需要检查输入时的错误 |
|--------+--------------------------------------------------------------+----------------------+------------+----------------------|
| +,-,*,/ | 两个                                                         |                      | friend or normal |                      |
| +=,-=,*=,/= | const T&rhs:右侧操作对象的常引用                             | 返回左侧操作对象的引用 | 推荐成员函数 |                      |
|--------+--------------------------------------------------------------+----------------------+------------+----------------------|
| --,++(前) | operator++()                                                 | 返回递增或递减后对象的引用 | member     |                      |
| --,++(后) | operator++(int)                                              | 返回递增递减之前的原值 | member     |                      |
|--------+--------------------------------------------------------------+----------------------+------------+----------------------|
| ()     | 无特殊要求                                                   | 无特殊要求           | member     |                      |
#+TBLFM:

#<<out>> 因为如果定义成成员函数，它的左侧操作对象将是我们类的一个对象，即我们在改写库ostream 或 istream,这这是不对的。

如果类重载了函数调用运算符，我们可以像使用函数一样使用该类的对象，称为“函数对象”。因为这样的类同时也能存储状态，所以与普通函数相比它们更加灵活。一个类可以定义多个调用运算符，相互之间应该在参数数量和类型上有所不同。函数对象常常作为泛型算法的实参。在P511 有1个计算器的例子。

** 重载、类型转换与运算符
一个参数（无论它有没有默认值）的构造函数可以将实参类型的对象转换成类类型，这样的构造函数称为 *转换构造函数* 这是一种隐式的类型转换；我们同样可以通过定义 *类型转换运算符做* 到类类型的类型转换（class-type comversions）。

*** 类型转换运算符
它是一种特殊的成员函数，负责将一个类类型转换为其它类型，其一般形式：operator //*type*// () const. 该运算符既没有显式的返回类型，也没有形参，而且必须定义成类的成员函数；由于它不应该改变待转换对象的内容，因此它一般被定义成 =const=.

类型转换运算符可以面向任何类型(void 除外)进行定义，只要该类型能作为函数的返回类型。该运算符都是隐式执行的，因此无法给它传递实参。
