#+INCLUDE: /home/ttt/.templates/NoteConfig.org
#+TITLE: C++ Standard Libarary
#+DATE:  2018-12-13
#+OPTIONS: H:3 num:t toc:t ^:{}

本文重点是C++标准库，分为顺序容器、泛型算法、关联容器、动态内存四个大部分。
* 顺序容器
顺序容器是指元素在容器中的位置与其加入容器的顺序相对应的容器。
#+CAPTION: 顺序容器类型
#+NAME: tab:seq_container
| 模板   | 名称         | 特性               | 说明                                               |
|--------+--------------+--------------------+----------------------------------------------------|
| =vector= | 可变大小数组 | 支持快速随机访问   | 元素连续存储，在尾部之外的位置添加或删除元素会很慢 |
| =array=  | 固定大小数组 | 支持快速随机访问   | 不能添加或删除元素                                 |
| =list=   | 双向链表     | 只支持双向顺序访问 | 元素存储不连续，在任何位置添加或删除元素都很快     |
| =deque=  | 双端队列     | 支持快速随机访问   | 在头尾位置添加删除元素很快                         |
** 容器库概览
容器类型上的操作形成了一种层次：
+ 某些操作是所有容器都提供的
+ 另外一些操作仅针对顺序容器、关联容器或无序容器
+ 还有一些操作只适用于一小部分容器
本小结主要介绍都所有容器都适用的操作，下一小节介绍顺序容器的操作，关联容器的操作将在下一节介绍。
*** 容器定义和初始化
容器是模板，需要在尖括号中填入元素的类型，对于 =array= 还要提供大小信息。
将一个容器初始化为另一个容器的拷贝有两种：
+ 拷贝整个容器 :: 这两个容器的类型及其元素的类型必须匹配
+ 拷贝一个由迭代器指定的范围 :: 两个容器的类型和元素的类型没要求，只要能将要拷贝的元素转换为要初始化的元素类型即可。
顺序容器（arrary 除外）还提供一个关联容器没有的构造函数，它接受一个容器的大小和一个可选的元素初始值，如果元素的类型具有
默认构造函数，可以只提供一个容器大小，如果元素类型没有默认构造函数，还需要再提供一个显式的元素初始值。
#+BEGIN_SRC C++ -n -r :exports both :results value verbatim
vector<int> vi(10);    //10个整型元素，默认初始化为0
vector<int> vi1(10,5); //10个整型元素，每个元素初始化为5
#+END_SRC
*** 迭代器
迭代器可以认为是指针，可以对它解引用获取容器的元素值。当 =auto= 与 =begin= 或 =end= 结合使用时，获得的迭代器类型（是否const)依赖于容器类型，但 =cbegin= 和 =cend= 可以获得常量迭代器，而不管容器是什么类型。
*** 赋值和swap
1. 赋值
   + 赋值运算符 :: 可以用在所有所有的容器类型中，必须保证赋值运算符左右两边的容器类型和容器的元素类型都一致
   + assign() :: 顺序容器（array 除外）还定义了一个 =assign= 的成员函数，允许我们从一个不同但相容的类型赋值，或者从一个容器的子序列赋值。
   赋值相关运算会导致原来指向左边容器内部的迭代器、引用和指针失效。
2. swap
   swap 操作交换两个相同类型容器的内容，除array外，该操作元素本身并未交换，只是交换了两个容器的内部数据结构，因此能在常数时间内完成，指向容器的迭代器、指针和引用仍指向交换操作之前所指向的元素，但是这些元素已经属于不同容器了；swap 两个array 会真正交换他们的元素，因此所需时间与其中元素的数量成正比，指向容器的迭代器、指针和引用保持不变，但其值已经发生了交换。统一使用非成员版本的swap 是一个好习惯。
#+BEGIN_SRC C++ -n -r :includes <iostream> :flags -Wall :main no :exports both :results value verbatim
  #include <array>
  #include <list>
  #include <string>
  #include <vector>
  int main(int argc, char *argv[]) {

      // assign
      std::vector<std::string> vs{{"English"}, {"Chinese"}};
      std::vector<char *> vs1{{"France"}, {"Japanese"}};
      std::list<char *> lc{{"England"}, {"China"}};
      // vs = vs1; //error
      vs.assign(lc.cbegin(), lc.cend());
      std::cout << vs.at(0) << '\t' << vs.at(1) << '\n';

      // swap
      std::vector<int> v1{1, 2, 3, 4, 5};
      std::vector<int> v2{6, 7, 8, 9};
      std::array<int, 5> a1{1, 2, 3, 4, 5};
      std::array<int, 5> a2{6, 7, 8, 9, 0};

      auto it1 = v1.cbegin();
      auto it2 = v2.cbegin();
      auto it3 = a1.cbegin();
      auto it4 = a2.cbegin();

      std::cout << "Before swap: " << *it1 << '\t' << *it2 << '\t' << *it3 << '\t'
              << *it4 << '\t' << &v1 << '\t' << &v2 << '\t' << &a1 << '\t' << &a2
              << '\n';
    std::swap(v1, v2);
    std::swap(a1, a2);
    std::cout << "After swap: " << *it1 << '\t' << *it2 << '\t' << *it3 << '\t'
              << *it4 << '\t' << &v1 << '\t' << &v2 << '\t' << &a1 << '\t' << &a2
              << '\n';

    it1 = v1.cbegin();
    it2 = v2.cbegin();
    it3 = a1.cbegin();
    it4 = a2.cbegin();
    std::cout << "After swap: " << *it1 << '\t' << *it2 << '\t' << *it3 << '\t'
              << *it4 << '\t' << &v1 << '\t' << &v2 << '\t' << &a1 << '\t' << &a2
              << '\n';
    return 0;
  }
#+END_SRC

#+RESULTS:
: England	China
: Before swap: 1	6	1	6	0x7ffe73a7c920	0x7ffe73a7c940	0x7ffe73a7c960	0x7ffe73a7c980
: After swap: 1	6	6	1	0x7ffe73a7c920	0x7ffe73a7c940	0x7ffe73a7c960	0x7ffe73a7c980
: After swap: 6	1	6	1	0x7ffe73a7c920	0x7ffe73a7c940	0x7ffe73a7c960	0x7ffe73a7c980
** 顺序容器操作
添加和删除元素会改变容器的大小，因此array 不支持添加和删除元素的操作。forward_list 有自己特殊的添加元素的函数，因此，先介绍比较通用的添加元素的方法，最后单独介绍forwar_list.
*** 添加元素
#+CAPTION: Add Element
|        | emplace_back(args) | emplace_front(args) | emplace(p,args)    |
|        | push_back(t)       | push_front(t)       | insert(p,t)        |
|        |                    |                     | insert(p,n,t)      |
|        |                    |                     | insert(p,b,e)      |
|        |                    |                     | insert(p,il)       |
|--------+--------------------+---------------------+--------------------|
| vector | 很快               | 不支持              | 很慢               |
| list   | 很快               | 很快                | 很快               |
| deque  | 很快               | 很快                | 首尾以外的位置很慢 |
insert*函数都会返回新添加的（第一个）元素的迭代器，插入位置为迭代器p 指向的元素之前,插入的的元素为t/n个t/迭代器b和e 范围内的元素/花括号包围起来的元素值列表. vector可以通过insert 函数实现从头部插入元素的目的。
使用push_*函数添加的元素都是实参对象的拷贝，后续对实参对象的修改不影响容器中的元素，反之亦然。使用emplace_*函数添加元素时，根据所传的args匹配元素类型的构造函数，直接用构造函数构造元素，没有拷贝这一步。

向 vector 插入元素后，如果存储空间重新分配了，那么原来指向容器的指针，迭代器，引用都失效，如果没有重新分配存储空间，则指向插入位置之后的迭代器等都会失效。对于list 和 forward_list 指向容器的迭代器等都还有效。对于deque,插入到除首尾位置之外的任何位置都会使迭代器等失效，如果插入到首尾位置，迭代器会失效，但指向存在元素的指针和引用不会失效。
*** 访问元素
由于vector 和 array 的元素是连续存放的，因此支持快速随机访问；list 是双向链表，只支持双向顺序访问；forward_list 是单向链表，只支持单向顺序访问，deque 双端队列，也支持快速随机访问。
*** 删除元素
|        | pop_back() | pop_front() | erase(p) | erase(b , e) | clear() |
| vector |            | 不支持      |          |              |         |
| list   |            |             |          |              |         |
| deque  |            |             |          |              |         |
erase 函数返回最后一个被删元素之后元素的迭代器

删除deque 中除首尾位置之外的任何元素都会使所有迭代器、引用和指针失效，指向 vector 中删除点之后的迭代器指针引用都失效。指向list 和 forward_list 的其它位置的迭代器等都有效。
*** 改变容器大小
resize 函数可以改变容器的大小，可以放大或缩小容器，放大时可以指定增加的元素的值： resize(n,t),缩小时多余的元素会被删掉。
*** 迭代器失效问题
当对除list 和 forward_list 以外的容器添加/删除元素后，其原有的迭代器很可能会失效，因此在这些操作后要及时更新迭代器，可以使用 insert() 和 erase()函数返回的迭代器进行更新。还有特别要注意的是，不要保存end()返回的迭代器，因为在添加/删除元素后，它很可能已经失效了。
* 关联容器
* 泛型算法
* 动态内存
