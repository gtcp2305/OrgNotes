#+TITILE:Emacs Setup C++ IDE
#+OPTIONS: ^:{}
Keywords: C++ completion and navigation (jump to definition, jump to
declaration, and so forth) based Clang-based rtags system.

* Pre-requires
** Clang/LLVM[fn::https://github.com/dfrib/emacs_setup]
First,install Clang/LLVM
#+BEGIN_SRC sh
$ sudo apt-get install clang-6.0 llvm-6.0 libclang-6.0-dev clang-format-6.0
#+END_SRC
You might also want to update to use clang-6.0 to provide for =/usr/bin/clang=
(which may be pointing to and older clang or missing entirely):
#+BEGIN_SRC sh
$ sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-6.0 100 \
--slave /usr/bin/clang++ clang++ /usr/bin/clang++-6.0 \
--slave /usr/bin/clang-check clang-check /usr/bin/clang-check-6.0 \
--slave /usr/bin/clang-query clang-query /usr/bin/clang-query-6.0 \
--slave /usr/bin/clang-rename clang-rename /usr/bin/clang-rename-6.0 \
--slave /usr/bin/clang-format clang-format /usr/bin/clang-format-6.0
#+END_SRC
Otherwise Emacs might prompt you that clang (or e.g. clang-format) cannot be
found.
** Rtags
Clone Rtags from repo:
#+BEGIN_SRC sh
$ cd ~/opensource
$ git clone --recursive https://github.com/Andersbakken/rtags.git
#+END_SRC
Build Rtags:
#+BEGIN_SRC sh
# in ~/opensource
$ cd rtags
$ mkdir build
$ cd build
$ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
$ make
$ sudo make install
#+END_SRC
Maybe you need this:
#+BEGIN_SRC sh
$ sudo apt install libcppunit-dev
#+END_SRC
* Run RTags
#+BEGIN_SRC sh
$ cd /path/to/project/root </build>
$ rdm &
$ cmake  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 . <..>
$ rc -J . <..>
#+END_SRC
RTags is made up of two programs:[fn::http://diobla.info/doc/rtags]
+ rdm:a server that index files and handles database queries.
+ rc:the client to control rdm (make queries, set project configuration, â€¦)
rdm uses a index database file called ~compile_commands.json~,which can be
generated by =cmake  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 . <..>=,use . or .. depends
on your =CMakeLists.txt= location.Lastly,tell =rc= the directory containing the ~compile_commands.json~ file.
Basic movements

    C-M-f runs forward-sexp, move forward over a balanced expression that can be a pair or a symbol.
    C-M-b runs backward-sexp, move backward over a balanced expression that can be a pair or a symbol.
    C-M-k runs kill-sexp, kill balanced expression forward that can be a pair or a symbol.
    C-M-<SPC> or C-M-@ runs mark-sexp, put mark after following expression that can be a pair or a symbol.
    C-M-a runs beginning-of-defun, which moves point to beginning of a function.
    C-M-e runs end-of-defun, which moves point to end of a function.
    C-M-h runs mark-defun, which put a region around whole current or following function.

Find definitions in project

    C-c-r . runs rtags-find-symbol-at-point, which jumps to the definition of the symbol under the cursor.

Find references in project

    C-c-r . runs rtags-find-references-at-point, which lists all references to the symbol under the cursor.
    C-c-r < runs rtags-find-references, which prompts for the symbol name and finds all references.
    C-c-r > runs rtags-find-symbol, which prompts for symbol name and finds all references.

Find files in project

    C-c r ; runs rtags-find-file, which prompts for file name to search for out of currently indexed files.

Alternatively, this can be better accomplished with Projectile.
View visited tags with tag stack

    C-c r [ rtags-location-stack-back Jumps to last visited tag.
    C-c r ] rtags-location-stack-forward Moves forward in location stack.
* cmake-ide
=M-x add-dir-local-variable= to add =.dir-locals.el= file in the project root,and
set =cmake-ide-build-dir= to =project_root/build= (absolute path),you should manualy
compile the project for the *first time*, e.g:
#+BEGIN_SRC sh
# in project root directory
$ cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
#+END_SRC
Now we have a =compile_commands.json= file in /build/ directory,and that is where
=cmake-ide-build-dir= indicated. From now on, we can use =M-x cmake-ide-compile= to compile and
index our project,and no longer care RTags and cmake,because that is all done by cmake-ide.
* Blog
[[https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/][Step-by-step guide to C++ navigation and completion with Emacs and the Clang-based rtags]]
